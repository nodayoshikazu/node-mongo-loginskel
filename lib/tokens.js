// Generated by CoffeeScript 1.6.2
(function() {
  var Tokens, dbconnection, mongodb, should,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mongodb = require('mongodb');

  dbconnection = require('./dbconnection');

  should = require('should');

  module.exports = Tokens = (function(_super) {
    __extends(Tokens, _super);

    function Tokens() {
      Tokens.__super__.constructor.call(this);
    }

    Tokens.prototype.create = function(user, fn) {
      var client,
        _this = this;

      should.exist(user);
      should.exist(fn);
      client = dbconnection.get_client();
      return client.open(function(err, p_client) {
        return p_client.collection('tokens', function(err, col) {
          var exp, now, token;

          token = _this._createToken(user);
          now = new Date();
          exp = new Date(now.getTime() + (24 * 60000));
          return col.insert({
            'token': token,
            'user_id': user._id,
            'expire': exp
          }, function(err, docs) {
            p_client.close();
            return fn(err, token);
          });
        });
      });
    };

    Tokens.prototype._createToken = function(user) {
      return user._id.toString();
    };

    Tokens.prototype["delete"] = function(token, fn) {
      var client,
        _this = this;

      should.exist(token);
      should.exist(fn);
      client = dbconnection.get_client();
      return client.open(function(err, p_client) {
        return p_client.collection('tokens', function(err, col) {
          return col.remove({
            'token': token
          }, function(err, wtf) {
            p_client.close();
            return fn(err, wtf);
          });
        });
      });
    };

    Tokens.prototype.validate = function(token, fn) {
      var client,
        _this = this;

      should.exist(token);
      should.exist(fn);
      client = dbconnection.get_client();
      return client.open(function(err, p_client) {
        return p_client.collection('tokens', function(err, col) {
          var now;

          console.log('Hey hey');
          now = new Date();
          return col.findOne({
            'token': token,
            'expire': {
              '$gt': now
            }
          }, function(err, wtf) {
            console.log(wtf);
            p_client.close();
            return fn(err, wtf);
          });
        });
      });
    };

    return Tokens;

  })(dbconnection);

}).call(this);
