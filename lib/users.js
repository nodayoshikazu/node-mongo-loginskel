// Generated by CoffeeScript 1.6.2
(function() {
  var Users, dbconnection, mongodb, should,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mongodb = require('mongodb');

  dbconnection = require('./dbconnection');

  should = require('should');

  module.exports = Users = (function(_super) {
    __extends(Users, _super);

    function Users() {
      Users.__super__.constructor.call(this);
    }

    Users.prototype.findByEmail = function(obj, fn) {
      var client,
        _this = this;

      client = dbconnection.get_client();
      return client.open(function(err, p_client) {
        return client.collection('users', function(err, col) {
          if (err) {
            console.log(err);
            client.close();
            return fn(err, null);
          }
          return col.findOne({
            "email": obj.username
          }, function(err, user) {
            client.close();
            return fn(err, user);
          });
        });
      });
    };

    Users.prototype.verifyPassword = function(user, password) {
      return user.password === password;
    };

    Users.prototype.findAll = function(fn) {
      var client,
        _this = this;

      client = dbconnection.get_client();
      return client.open(function(err, p_client) {
        return client.collection('users', function(err, col) {
          if (err) {
            console.log(err);
            client.close();
            return fn(err, null);
          }
          return col.find({}, function(err, cursor) {
            if (err) {
              console.log(err);
              client.close();
              return fn(err, null);
            }
            return cursor.toArray(function(err, items) {
              items.length.should.be.above(0);
              client.close();
              return fn(err, items);
            });
          });
        });
      });
    };

    return Users;

  })(dbconnection);

}).call(this);
