// Generated by CoffeeScript 1.6.2
(function() {
  var LocalStrategy, Tokens, Users, allowCrossDomain, app, dbconnection, express, fs, http, passport, path, server, users, _;

  express = require("express");

  _ = require("underscore");

  fs = require("fs");

  dbconnection = require("./models/dbconnection");

  Users = require("./models/users");

  Tokens = require("./models/tokens");

  http = require("http");

  path = require("path");

  passport = require("passport");

  LocalStrategy = require("passport-local").Strategy;

  users = new Users();

  allowCrossDomain = function(req, res, next) {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type');
    if (req.method === 'OPTIONS') {
      return res.send(200);
    } else {
      return next();
    }
  };

  passport.use(new LocalStrategy(function(username, password, done) {
    return process.nextTick(function() {
      return users.findByEmail({
        username: username
      }, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          return done(null, false, {
            message: "Unknown user " + username
          });
        }
        if (!!users.verifyPassword(user, password)) {
          return done(null, false, {
            message: "Invalid password"
          });
        }
        return done(null, user);
      });
    });
  }));

  app = express();

  app.configure(function() {
    app.set("port", process.env.PORT || 3000);
    app.use(express.favicon());
    app.use(express.logger("dev"));
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(allowCrossDomain);
    app.use(passport.initialize());
    app.use(app.router);
    return app.use(express["static"](path.join(__dirname, "public")));
  });

  app.configure("development", function() {
    return app.use(express.errorHandler());
  });

  app.get("/app/users", function(req, res) {
    return users.findAll(function(err, all) {
      res.status(200);
      return res.json(all);
    });
  });

  app.post("/app/tokens", function(req, res, next) {
    var _this = this;

    return passport.authenticate("local", {
      session: false
    }, function(err, user, info) {
      var tokens;

      if (err) {
        return next(err);
      }
      if (!user) {
        res.status(404);
        return res.send(null);
      } else {
        tokens = new Tokens();
        return tokens.create(user, function(err, tk) {
          res.status(200);
          return res.send(tk);
        });
      }
    })(req, res, next);
  });

  app["delete"]("/app/tokens", function(req, res) {
    var tokens,
      _this = this;

    tokens = new Tokens();
    return tokens.validate(req.body.token, function(err, ok) {
      console.log('OK=' + ok);
      if (err) {
        res.status(401);
        return res.send("Invalid token or token had expired");
      } else {
        if (ok === null) {
          res.status(401);
          return res.send("Invalid token or token had expired");
        } else {
          return tokens["delete"](req.body.token, function(err, wtf) {
            if (err) {
              res.status(err);
              return res.send(wtf);
            } else {
              res.status(200);
              return res.send("You have signed out");
            }
          });
        }
      }
    });
  });

  app.get("/app/login", function(req, res) {
    var login_form;

    login_form = '<form action="/app/tokens" method="post">' + '<div><label>Email:</label><input type="text" name="username"/></div>' + '<div><label>Password:</label><input type="password" name="password"/></div>' + '<div><input type="submit" value="Login"/></div></form>';
    res.status(200);
    return res.send(login_form);
  });

  app.get("/app/logout", function(req, res) {
    var logout_form;

    logout_form = '<form action="/app/tokens" method="post">' + '    <div><label for="token">Token:</label><input type="text" name="token" id="token" /></div>' + '    <input type="submit" value="Logout"/>' + '    <input type="hidden" id="_method" name="_method" value="delete" />' + '</form>';
    res.status(200);
    return res.send(logout_form);
  });

  server = http.createServer(app);

  server.listen(app.get('port'));

}).call(this);
